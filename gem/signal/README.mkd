# Signal gem for ORuby (EXPERIMENTAL)

This oruby gem is not part of the ORuby fullcore.

This is EXPERIMENTAL code. MRuby does not have any support for concurrent access, and
Go signal handling is done via goroutines and channels. So things are prone to race conditions.

If you are using ORuby scripting, signals should (probably) not be handled via script code.

Nice thing with ORuby gems is that this code can be separated in gem, where it can
be played with, tested.

## Install

```go
import (
	"github.com/oruby/oruby"

	_ "github.com/oruby/oruby/gem/signal"
)
```

## Docs

Signal gem follows ORuby "core gems code" to be as close as possible to MRI Ruby core,
so you can see consult docs for Ruby Signal module.

Implementation is thin scripting over standard Go signal handling. Which means that
everything about Go signal handling should be considered. Signal constants are added
for Windows, Linux and macOS, plus SIGINT and SIGKILL which are supported on all Go platforms.

## Implementation

At the moment, the implementation uses ```mrb.Inject(rproc)``` on signal receive to route
proc to main mrb goroutine, where it is executed in VM, or out of VM if VM is not executing.
This is still EXPERIMENTAL, and can lead to unexpected behaviour.

Things that work, but need more testing:

  * Signals received while VM is executing - serialized using channels and VM C callback in mruby
  * EXIT Signals - these rprocs get executed on oruby.MrbState ```Close()```

Things that can bomb:

  * Signals received while VM is not executing. This is "gray" area, since in MRI Ruby
    VM is executing always. This is a situation where signal handler is set, for example
    via ```mrb.Eval()```, and signal is arriving after eval, when no oruby VM code is executing.
    At that moment, code is just executed. But since mruby does not have sync primitives
    some other C API code might be executing and accessing state.

    Since Go handler is goroutine, only right thing to do is to lock every API call, which
    is something I would like to avoid.

    Alternative solution would be to have manual API call which will "drain" and execute signal
    procs and leave it to the user to call it somewhere in context of goroutine where ORuby state
    runs.

## Usage

```go
package main

import (
	"github.com/oruby/oruby"
	_ "github.com/oruby/oruby/gem/signal"
)

func main() {
	mrb := oruby.MrbOpen()
	defer mrb.Close()

	// Goroutine which sends SIGUSR1 to current process 1 second after execution
	go func() {
		<-time.After(1 * time.Second)
		_= syscall.Kill(syscall.Getpid(), syscall.SIGUSR1)
	}()

	// ORuby script with infinite loop that gets interupted via signal
	_,_= mrb.Eval(`
		$testv = 0
		Signal.trap("USR1") { p "Received USR1"; raise StopIteration }
		Signal.trap(0) { p "Exited." }

		# Infinite loop
		loop do
			$testv = 1
		end
	`)

	println("Out of the Eval")
}

// Should output:
// "Received USR1"
// "Out of the Eval"
// "Exited."
```

## License

ORuby is available as open source under the terms of the [Apache License 2.0 License][license]

(c) 2020, Dušan D. Majkić

## Authors

* Dušan D. Majkić [oruby]

[license]: https://opensource.org/licenses/Apache-2.0
[oruby]: https://github.com/oruby/oruby
